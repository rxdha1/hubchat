"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/fetch-retry";
exports.ids = ["vendor-chunks/fetch-retry"];
exports.modules = {

/***/ "(ssr)/./node_modules/fetch-retry/index.js":
/*!*******************************************!*\
  !*** ./node_modules/fetch-retry/index.js ***!
  \*******************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = function (fetch, defaults) {\n  defaults = defaults || {};\n  if (typeof fetch !== 'function') {\n    throw new ArgumentError('fetch must be a function');\n  }\n\n  if (typeof defaults !== 'object') {\n    throw new ArgumentError('defaults must be an object');\n  }\n\n  if (defaults.retries !== undefined && !isPositiveInteger(defaults.retries)) {\n    throw new ArgumentError('retries must be a positive integer');\n  }\n\n  if (defaults.retryDelay !== undefined && !isPositiveInteger(defaults.retryDelay) && typeof defaults.retryDelay !== 'function') {\n    throw new ArgumentError('retryDelay must be a positive integer or a function returning a positive integer');\n  }\n\n  if (defaults.retryOn !== undefined && !Array.isArray(defaults.retryOn) && typeof defaults.retryOn !== 'function') {\n    throw new ArgumentError('retryOn property expects an array or function');\n  }\n\n  var baseDefaults = {\n    retries: 3,\n    retryDelay: 1000,\n    retryOn: [],\n  };\n\n  defaults = Object.assign(baseDefaults, defaults);\n\n  return function fetchRetry(input, init) {\n    var retries = defaults.retries;\n    var retryDelay = defaults.retryDelay;\n    var retryOn = defaults.retryOn;\n\n    if (init && init.retries !== undefined) {\n      if (isPositiveInteger(init.retries)) {\n        retries = init.retries;\n      } else {\n        throw new ArgumentError('retries must be a positive integer');\n      }\n    }\n\n    if (init && init.retryDelay !== undefined) {\n      if (isPositiveInteger(init.retryDelay) || (typeof init.retryDelay === 'function')) {\n        retryDelay = init.retryDelay;\n      } else {\n        throw new ArgumentError('retryDelay must be a positive integer or a function returning a positive integer');\n      }\n    }\n\n    if (init && init.retryOn) {\n      if (Array.isArray(init.retryOn) || (typeof init.retryOn === 'function')) {\n        retryOn = init.retryOn;\n      } else {\n        throw new ArgumentError('retryOn property expects an array or function');\n      }\n    }\n\n    // eslint-disable-next-line no-undef\n    return new Promise(function (resolve, reject) {\n      var wrappedFetch = function (attempt) {\n        // As of node 18, this is no longer needed since node comes with native support for fetch:\n        /* istanbul ignore next */\n        var _input =\n          typeof Request !== 'undefined' && input instanceof Request\n            ? input.clone()\n            : input;\n        fetch(_input, init)\n          .then(function (response) {\n            if (Array.isArray(retryOn) && retryOn.indexOf(response.status) === -1) {\n              resolve(response);\n            } else if (typeof retryOn === 'function') {\n              try {\n                // eslint-disable-next-line no-undef\n                return Promise.resolve(retryOn(attempt, null, response))\n                  .then(function (retryOnResponse) {\n                    if(retryOnResponse) {\n                      retry(attempt, null, response);\n                    } else {\n                      resolve(response);\n                    }\n                  }).catch(reject);\n              } catch (error) {\n                reject(error);\n              }\n            } else {\n              if (attempt < retries) {\n                retry(attempt, null, response);\n              } else {\n                resolve(response);\n              }\n            }\n          })\n          .catch(function (error) {\n            if (typeof retryOn === 'function') {\n              try {\n                // eslint-disable-next-line no-undef\n                Promise.resolve(retryOn(attempt, error, null))\n                  .then(function (retryOnResponse) {\n                    if(retryOnResponse) {\n                      retry(attempt, error, null);\n                    } else {\n                      reject(error);\n                    }\n                  })\n                  .catch(function(error) {\n                    reject(error);\n                  });\n              } catch(error) {\n                reject(error);\n              }\n            } else if (attempt < retries) {\n              retry(attempt, error, null);\n            } else {\n              reject(error);\n            }\n          });\n      };\n\n      function retry(attempt, error, response) {\n        var delay = (typeof retryDelay === 'function') ?\n          retryDelay(attempt, error, response) : retryDelay;\n        setTimeout(function () {\n          wrappedFetch(++attempt);\n        }, delay);\n      }\n\n      wrappedFetch(0);\n    });\n  };\n};\n\nfunction isPositiveInteger(value) {\n  return Number.isInteger(value) && value >= 0;\n}\n\nfunction ArgumentError(message) {\n  this.name = 'ArgumentError';\n  this.message = message;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZmV0Y2gtcmV0cnkvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0EsV0FBVztBQUNYOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGF0Ym90Ly4vbm9kZV9tb2R1bGVzL2ZldGNoLXJldHJ5L2luZGV4LmpzP2NhNjIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmZXRjaCwgZGVmYXVsdHMpIHtcbiAgZGVmYXVsdHMgPSBkZWZhdWx0cyB8fCB7fTtcbiAgaWYgKHR5cGVvZiBmZXRjaCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBBcmd1bWVudEVycm9yKCdmZXRjaCBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZGVmYXVsdHMgIT09ICdvYmplY3QnKSB7XG4gICAgdGhyb3cgbmV3IEFyZ3VtZW50RXJyb3IoJ2RlZmF1bHRzIG11c3QgYmUgYW4gb2JqZWN0Jyk7XG4gIH1cblxuICBpZiAoZGVmYXVsdHMucmV0cmllcyAhPT0gdW5kZWZpbmVkICYmICFpc1Bvc2l0aXZlSW50ZWdlcihkZWZhdWx0cy5yZXRyaWVzKSkge1xuICAgIHRocm93IG5ldyBBcmd1bWVudEVycm9yKCdyZXRyaWVzIG11c3QgYmUgYSBwb3NpdGl2ZSBpbnRlZ2VyJyk7XG4gIH1cblxuICBpZiAoZGVmYXVsdHMucmV0cnlEZWxheSAhPT0gdW5kZWZpbmVkICYmICFpc1Bvc2l0aXZlSW50ZWdlcihkZWZhdWx0cy5yZXRyeURlbGF5KSAmJiB0eXBlb2YgZGVmYXVsdHMucmV0cnlEZWxheSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBBcmd1bWVudEVycm9yKCdyZXRyeURlbGF5IG11c3QgYmUgYSBwb3NpdGl2ZSBpbnRlZ2VyIG9yIGEgZnVuY3Rpb24gcmV0dXJuaW5nIGEgcG9zaXRpdmUgaW50ZWdlcicpO1xuICB9XG5cbiAgaWYgKGRlZmF1bHRzLnJldHJ5T24gIT09IHVuZGVmaW5lZCAmJiAhQXJyYXkuaXNBcnJheShkZWZhdWx0cy5yZXRyeU9uKSAmJiB0eXBlb2YgZGVmYXVsdHMucmV0cnlPbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBBcmd1bWVudEVycm9yKCdyZXRyeU9uIHByb3BlcnR5IGV4cGVjdHMgYW4gYXJyYXkgb3IgZnVuY3Rpb24nKTtcbiAgfVxuXG4gIHZhciBiYXNlRGVmYXVsdHMgPSB7XG4gICAgcmV0cmllczogMyxcbiAgICByZXRyeURlbGF5OiAxMDAwLFxuICAgIHJldHJ5T246IFtdLFxuICB9O1xuXG4gIGRlZmF1bHRzID0gT2JqZWN0LmFzc2lnbihiYXNlRGVmYXVsdHMsIGRlZmF1bHRzKTtcblxuICByZXR1cm4gZnVuY3Rpb24gZmV0Y2hSZXRyeShpbnB1dCwgaW5pdCkge1xuICAgIHZhciByZXRyaWVzID0gZGVmYXVsdHMucmV0cmllcztcbiAgICB2YXIgcmV0cnlEZWxheSA9IGRlZmF1bHRzLnJldHJ5RGVsYXk7XG4gICAgdmFyIHJldHJ5T24gPSBkZWZhdWx0cy5yZXRyeU9uO1xuXG4gICAgaWYgKGluaXQgJiYgaW5pdC5yZXRyaWVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChpc1Bvc2l0aXZlSW50ZWdlcihpbml0LnJldHJpZXMpKSB7XG4gICAgICAgIHJldHJpZXMgPSBpbml0LnJldHJpZXM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgQXJndW1lbnRFcnJvcigncmV0cmllcyBtdXN0IGJlIGEgcG9zaXRpdmUgaW50ZWdlcicpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpbml0ICYmIGluaXQucmV0cnlEZWxheSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoaXNQb3NpdGl2ZUludGVnZXIoaW5pdC5yZXRyeURlbGF5KSB8fCAodHlwZW9mIGluaXQucmV0cnlEZWxheSA9PT0gJ2Z1bmN0aW9uJykpIHtcbiAgICAgICAgcmV0cnlEZWxheSA9IGluaXQucmV0cnlEZWxheTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBBcmd1bWVudEVycm9yKCdyZXRyeURlbGF5IG11c3QgYmUgYSBwb3NpdGl2ZSBpbnRlZ2VyIG9yIGEgZnVuY3Rpb24gcmV0dXJuaW5nIGEgcG9zaXRpdmUgaW50ZWdlcicpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpbml0ICYmIGluaXQucmV0cnlPbikge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaW5pdC5yZXRyeU9uKSB8fCAodHlwZW9mIGluaXQucmV0cnlPbiA9PT0gJ2Z1bmN0aW9uJykpIHtcbiAgICAgICAgcmV0cnlPbiA9IGluaXQucmV0cnlPbjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBBcmd1bWVudEVycm9yKCdyZXRyeU9uIHByb3BlcnR5IGV4cGVjdHMgYW4gYXJyYXkgb3IgZnVuY3Rpb24nKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHdyYXBwZWRGZXRjaCA9IGZ1bmN0aW9uIChhdHRlbXB0KSB7XG4gICAgICAgIC8vIEFzIG9mIG5vZGUgMTgsIHRoaXMgaXMgbm8gbG9uZ2VyIG5lZWRlZCBzaW5jZSBub2RlIGNvbWVzIHdpdGggbmF0aXZlIHN1cHBvcnQgZm9yIGZldGNoOlxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICB2YXIgX2lucHV0ID1cbiAgICAgICAgICB0eXBlb2YgUmVxdWVzdCAhPT0gJ3VuZGVmaW5lZCcgJiYgaW5wdXQgaW5zdGFuY2VvZiBSZXF1ZXN0XG4gICAgICAgICAgICA/IGlucHV0LmNsb25lKClcbiAgICAgICAgICAgIDogaW5wdXQ7XG4gICAgICAgIGZldGNoKF9pbnB1dCwgaW5pdClcbiAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHJldHJ5T24pICYmIHJldHJ5T24uaW5kZXhPZihyZXNwb25zZS5zdGF0dXMpID09PSAtMSkge1xuICAgICAgICAgICAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHJldHJ5T24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJldHJ5T24oYXR0ZW1wdCwgbnVsbCwgcmVzcG9uc2UpKVxuICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJldHJ5T25SZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICBpZihyZXRyeU9uUmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXRyeShhdHRlbXB0LCBudWxsLCByZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0pLmNhdGNoKHJlamVjdCk7XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKGF0dGVtcHQgPCByZXRyaWVzKSB7XG4gICAgICAgICAgICAgICAgcmV0cnkoYXR0ZW1wdCwgbnVsbCwgcmVzcG9uc2UpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHJldHJ5T24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICAgICAgICAgICAgICBQcm9taXNlLnJlc29sdmUocmV0cnlPbihhdHRlbXB0LCBlcnJvciwgbnVsbCkpXG4gICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmV0cnlPblJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmKHJldHJ5T25SZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHJ5KGF0dGVtcHQsIGVycm9yLCBudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSBjYXRjaChlcnJvcikge1xuICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYXR0ZW1wdCA8IHJldHJpZXMpIHtcbiAgICAgICAgICAgICAgcmV0cnkoYXR0ZW1wdCwgZXJyb3IsIG51bGwpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgIH07XG5cbiAgICAgIGZ1bmN0aW9uIHJldHJ5KGF0dGVtcHQsIGVycm9yLCByZXNwb25zZSkge1xuICAgICAgICB2YXIgZGVsYXkgPSAodHlwZW9mIHJldHJ5RGVsYXkgPT09ICdmdW5jdGlvbicpID9cbiAgICAgICAgICByZXRyeURlbGF5KGF0dGVtcHQsIGVycm9yLCByZXNwb25zZSkgOiByZXRyeURlbGF5O1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB3cmFwcGVkRmV0Y2goKythdHRlbXB0KTtcbiAgICAgICAgfSwgZGVsYXkpO1xuICAgICAgfVxuXG4gICAgICB3cmFwcGVkRmV0Y2goMCk7XG4gICAgfSk7XG4gIH07XG59O1xuXG5mdW5jdGlvbiBpc1Bvc2l0aXZlSW50ZWdlcih2YWx1ZSkge1xuICByZXR1cm4gTnVtYmVyLmlzSW50ZWdlcih2YWx1ZSkgJiYgdmFsdWUgPj0gMDtcbn1cblxuZnVuY3Rpb24gQXJndW1lbnRFcnJvcihtZXNzYWdlKSB7XG4gIHRoaXMubmFtZSA9ICdBcmd1bWVudEVycm9yJztcbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/fetch-retry/index.js\n");

/***/ })

};
;